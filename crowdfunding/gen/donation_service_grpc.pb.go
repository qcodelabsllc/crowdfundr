// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: donation_service.proto

package crowdfundr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DonationServiceClient is the client API for DonationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonationServiceClient interface {
	// Event triggered when a new donation is made
	DonationMade(ctx context.Context, in *Donation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Event triggered when funds are disbursed for a project
	FundsDisbursed(ctx context.Context, in *Disbursement, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type donationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDonationServiceClient(cc grpc.ClientConnInterface) DonationServiceClient {
	return &donationServiceClient{cc}
}

func (c *donationServiceClient) DonationMade(ctx context.Context, in *Donation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/crowdfunding.DonationService/DonationMade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) FundsDisbursed(ctx context.Context, in *Disbursement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/crowdfunding.DonationService/FundsDisbursed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonationServiceServer is the server API for DonationService service.
// All implementations must embed UnimplementedDonationServiceServer
// for forward compatibility
type DonationServiceServer interface {
	// Event triggered when a new donation is made
	DonationMade(context.Context, *Donation) (*emptypb.Empty, error)
	// Event triggered when funds are disbursed for a project
	FundsDisbursed(context.Context, *Disbursement) (*emptypb.Empty, error)
	mustEmbedUnimplementedDonationServiceServer()
}

// UnimplementedDonationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDonationServiceServer struct {
}

func (UnimplementedDonationServiceServer) DonationMade(context.Context, *Donation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DonationMade not implemented")
}
func (UnimplementedDonationServiceServer) FundsDisbursed(context.Context, *Disbursement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundsDisbursed not implemented")
}
func (UnimplementedDonationServiceServer) mustEmbedUnimplementedDonationServiceServer() {}

// UnsafeDonationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonationServiceServer will
// result in compilation errors.
type UnsafeDonationServiceServer interface {
	mustEmbedUnimplementedDonationServiceServer()
}

func RegisterDonationServiceServer(s grpc.ServiceRegistrar, srv DonationServiceServer) {
	s.RegisterService(&DonationService_ServiceDesc, srv)
}

func _DonationService_DonationMade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Donation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).DonationMade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowdfunding.DonationService/DonationMade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).DonationMade(ctx, req.(*Donation))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_FundsDisbursed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Disbursement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).FundsDisbursed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowdfunding.DonationService/FundsDisbursed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).FundsDisbursed(ctx, req.(*Disbursement))
	}
	return interceptor(ctx, in, info, handler)
}

// DonationService_ServiceDesc is the grpc.ServiceDesc for DonationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crowdfunding.DonationService",
	HandlerType: (*DonationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DonationMade",
			Handler:    _DonationService_DonationMade_Handler,
		},
		{
			MethodName: "FundsDisbursed",
			Handler:    _DonationService_FundsDisbursed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "donation_service.proto",
}
